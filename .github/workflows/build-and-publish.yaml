---
name: Build and Publish

on:
  push:
    branches:
      - redhat-** # IMPORTANT! this must match the jobs.build-and-publish.env.BRANCH_PREFIX (save the **).
  workflow_dispatch:
    # Allows you to run this workflow manually from the Actions tab
    inputs:
      tag:
        description: 'Tag to attach to image'
        required: true
jobs:
  build-and-publish:
    name: Publish container image
    env:
      BRANCH_PREFIX: redhat- # IMPORTANT! this must match the .on.push.branches prefix!
      REGISTRY: ${{ secrets.REGISTRY || 'quay.io/projectquay' }}
      REPO_NAME: ${{ github.event.repository.name }}
      TAG_SUFFIX: -unstable
      ZVSI_FP_NAME: quay-floating
      ZVSI_KEY_NAME: quay-key
      ZVSI_INSTANCE_NAME: quay-zvsi
      ZVSI_VPC: r018-b72c601c-c1d9-42cf-af66-c0f6da4ab982
      ZVSI_ZONE_NAME: eu-gb-2
      ZVSI_PROFILE_NAME: bz2-4x16
      ZVSI_SUBNET: 0797-88f93aad-3acd-4c8e-be10-8dc6d41bc9b9
      ZVSI_IMAGE: r018-acadf3d4-f340-4e13-add0-49ce45e8a778
      ZVSI_KEY: r018-ee997015-b88c-4500-874c-71f2175a8284
      ZVSI_RG_ID: 2e818eb391df4774977812b50ff0e8c9
    runs-on: 'ubuntu-latest'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set version from branch name
        id: version-from-branch
        if: startsWith('env.BRANCH_PREFIX', env.GITHUB_REF)
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "version=${BRANCH_NAME/${{ env.BRANCH_PREFIX }}/}" >> $GITHUB_OUTPUT
      
      - name: Install IBMCLI
        run: curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
          
      - name: IBM Cloud Login
        run: ibmcloud login -q --apikey ${{ secrets.IBMCLOUD_API_KEY }} -r eu-gb 
          
      - name: Install VPC CLI plug-in
        run: ibmcloud plugin install vpc-infrastructure
          
      - name: Creation of ZVSI
        id: ZVSI
        run: |
          #creation of zvsi
          ibmcloud is instance-create $ZVSI_INSTANCE_NAME $ZVSI_VPC $ZVSI_ZONE_NAME $ZVSI_PROFILE_NAME $ZVSI_SUBNET --image $ZVSI_IMAGE --keys $ZVSI_KEY --resource-group-id $ZVSI_RG_ID
          #Reserving a floating ip to the ZVSI
          ibmcloud is floating-ip-reserve $ZVSI_FP_NAME --zone $ZVSI_ZONE_NAME --resource-group-id $ZVSI_RG_ID --in $ZVSI_INSTANCE_NAME
          #Bouding the Floating ip to the ZVSI
          ibmcloud is floating-ip-update $ZVSI_FP_NAME --nic primary --in $ZVSI_INSTANCE_NAME
          sleep 20
            
          #Saving the Floating IP to login ZVSI
          ZVSI_HOST=$(ibmcloud is floating-ip $ZVSI_FP_NAME | awk '/Address/{print $2}')
          echo $ZVSI_HOST
          echo "IP=${ZVSI_HOST}" >> $GITHUB_OUTPUT
          
      - name: Setup SSH config for builders
        env:
          BUILDER_AARCH64_SSH_CONFIG: ${{ secrets.BUILDER_AARCH64_SSH_CONFIG }}
          BUILDER_AARCH64_SSH_KEY: ${{ secrets.BUILDER_AARCH64_SSH_KEY }}
          BUILDER_AARCH64_SSH_KNOWN_HOSTS: ${{ secrets.BUILDER_AARCH64_SSH_KNOWN_HOSTS }}
          BUILDER_PPC64LE_SSH_CONFIG: ${{ secrets.BUILDER_PPC64LE_SSH_CONFIG }}
          BUILDER_PPC64LE_SSH_KEY: ${{ secrets.BUILDER_PPC64LE_SSH_KEY }}
          BUILDER_PPC64LE_SSH_KNOWN_HOSTS: ${{ secrets.BUILDER_PPC64LE_SSH_KNOWN_HOSTS }}
          BUILDER_S390X_SSH_HOST: ${{ steps.ZVSI.outputs.IP }}
          BUILDER_S390X_SSH_KEY: ${{ secrets.ZVSI_PR_KEY }}
        run: |
          mkdir ~/.ssh
          chmod 700 ~/.ssh

          touch ~/.ssh/id_builder_aarch64
          chmod 600 ~/.ssh/id_builder_aarch64
          echo "$BUILDER_AARCH64_SSH_KEY" >~/.ssh/id_builder_aarch64

          touch ~/.ssh/id_builder_ppc64le
          chmod 600 ~/.ssh/id_builder_ppc64le
          echo "$BUILDER_PPC64LE_SSH_KEY" >~/.ssh/id_builder_ppc64le
          
          touch ~/.ssh/id_builder_s390x
          chmod 600 ~/.ssh/id_builder_s390x
          echo "$BUILDER_S390X_SSH_KEY" > ~/.ssh/id_builder_s390x
          
          touch ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
          cat >~/.ssh/known_hosts <<END
          $BUILDER_AARCH64_SSH_KNOWN_HOSTS
          $BUILDER_PPC64LE_SSH_KNOWN_HOSTS
          END

          touch ~/.ssh/config
          chmod 600 ~/.ssh/config
          cat >~/.ssh/config <<END
          Host builder-aarch64
            IdentityFile "~/.ssh/id_builder_aarch64"
          $BUILDER_AARCH64_SSH_CONFIG

          Host builder-ppc64le
            IdentityFile "~/.ssh/id_builder_ppc64le"
          $BUILDER_PPC64LE_SSH_CONFIG
          
          Host builder-s390x
            StrictHostKeyChecking no
            HostName $BUILDER_S390X_SSH_HOST
            User root
            IdentityFile "~/.ssh/id_builder_s390x"
          END

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: v0.11.0-rc2
          platforms: linux/amd64
          append: |
            - endpoint: ssh://builder-aarch64
              platforms: linux/arm64
            - endpoint: ssh://builder-ppc64le
              platforms: linux/ppc64le
            - endpoint: ssh://builder-s390x
              platforms: linux/s390x
              
      - name: Login to Quay.io
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USER }}
          password: ${{ secrets.QUAY_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        env:
          TAG: ${{ steps.version-from-branch.outputs.version }}${{ env.TAG_SUFFIX }}
        with:
          platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REPO_NAME }}:${{ github.event.inputs.tag || env.TAG }}
      
      - name: Post Build-and-publish-s390x
        if: ${{ steps.ZVSI.conclusion == 'success' && always() }}
        run: |
          #Delete the created ZVSI
          ibmcloud is instance-delete $ZVSI_INSTANCE_NAME --force
          sleep 20
          
          #Release the created FP
          ibmcloud is floating-ip-release $ZVSI_FP_NAME --force

