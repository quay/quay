name: CI
on:
  # See the documentation for more intricate event dispatch here:
  # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#on
  push:
    branches:
    - "!dependabot/*"
    - "*"
  pull_request:
    branches:
    - "*"
jobs:
  build:
    name: Format
    runs-on: ubuntu-20.04
    steps:

    - uses: actions/checkout@v2

    - name: Set up Python 3.9
      uses: actions/setup-python@v1
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black==22.3.0
        pip install flake8

    - name: Check Formatting (Black)
      run: |
        black --line-length=100 --target-version=py39 --check --diff .

    - name: Check Formatting (Flake8)
      run: |
        # The code-base needs to be cleaned up. There are too many Flake8
        # related warnings now. Ignore known problems to catch new ones.
        flake8 --ignore=C901,E203,E262,E265,E266,E402,E501,E712,E713,E722,E731,E741,F401,F403,F405,F811,F821,F841,W503
        # Run full scan for visibility purposes.
        flake8 --exit-zero

    - name: Check Requirements are pinned
      run: |
        # Read each line of requirement.txt and flag if any line doesn't contain ==, @, newline, or #
        sed '/^$/d' < requirements.txt | while read i; do if [[ ! $i =~ [==|@|^#] ]]; then echo $i is not pinned; fi; done

  unit:
    name: Unit Test
    runs-on: ubuntu-20.04
    steps:

    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v1
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libgpgme-dev libldap2-dev libsasl2-dev swig
        cat requirements-dev.txt | grep tox | xargs pip install

    - name: tox
      run: tox -e py39-unit

  types:
    name: Types Test
    runs-on: ubuntu-20.04
    steps:

    - uses: actions/checkout@v2

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        cache: 'pip'
        cache-dependency-path: |
          requirements.txt
          requirements-dev.txt

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libgpgme-dev libldap2-dev libsasl2-dev swig

    - name: Check requirements.txt
      run: |
        pip install wheel  # allow pip to use wheel instead of legacy 'setup.py install'
        pip install -r ./requirements.txt

        TMP_REQUIREMENTS=$(mktemp "${TMPDIR:-/tmp/}requirements-txt.XXXXXXXX")
        TMP_PIP_FREEZE=$(mktemp "${TMPDIR:-/tmp/}pip-freeze.XXXXXXXX")
        trap 'rc=$?; rm -f "$TMP_REQUIREMENTS" "$TMP_PIP_FREEZE"; exit $rc' EXIT

        sed -n 's/ *#.*//; s/\[[^]]*\]//g; s/^pip==.*/pip/; /./p' ./requirements.txt | sort >"$TMP_REQUIREMENTS"
        pip freeze --all | sed 's/^pip==.*/pip/' | sort >"$TMP_PIP_FREEZE"

        if ! diff -u "$TMP_REQUIREMENTS" "$TMP_PIP_FREEZE"; then
          echo >&2 "requirements.txt doesn't have all dependencies pinned. Please check output above to see what should be added."
          exit 1
        fi

    - name: Install dev dependencies
      run: |
        pip install -r ./requirements-dev.txt

    - name: Check Types
      run: make types-test

  e2e:
    name: E2E Tests
    runs-on: ubuntu-20.04
    steps:

    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v1
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libgpgme-dev libldap2-dev libsasl2-dev swig
        python -m pip install --upgrade pip
        cat requirements-dev.txt | grep tox | xargs pip install

    - name: tox
      run: tox -e py39-e2e

  registry:
    name: E2E Registry Tests
    runs-on: ubuntu-20.04
    steps:

    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v1
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libgpgme-dev libldap2-dev libsasl2-dev swig
        python -m pip install --upgrade pip
        cat requirements-dev.txt | grep tox | xargs pip install

    - name: tox
      run: tox -e py39-registry

  docker-amd64:
    name: Docker Build amd64
    runs-on: ubuntu-20.04
    steps:

    - uses: actions/checkout@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Install yq
      env:
        VERSION: v4.14.2
        BINARY: yq_linux_amd64
      run: |
        wget https://github.com/mikefarah/yq/releases/download/${VERSION}/${BINARY} -O /usr/local/bin/yq
        chmod +x /usr/local/bin/yq

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Docker Build (linux/amd64)
      env:
       DOCKER_BUILDKIT: 1
      run: docker build --platform=linux/amd64 -t localhost/quay-local:latest .

    - name: Start Quay
      run: |
        docker-compose up -d redis quay-db
        docker exec -t quay-db bash -c 'while ! pg_isready; do echo "waiting for postgres"; sleep 2; done'
        DOCKER_USER="1001:0" docker-compose up -d --no-build quay
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Seed Database
      run: cd web && npm run quay:seed

    - name: Set up Python 3.9
      uses: actions/setup-python@v1
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest requests

    - name: Integration Test
      run:  |
        docker restart quay-quay
        sleep 30
        make integration-test
    
    - name: Cypress run
      uses: cypress-io/github-action@v4.2.0
      with:
        browser: chrome
        build: npm run build
        start: npm run start:integration
        wait-on: 'http://localhost:9000'
        wait-on-timeout: 120
        working-directory: web
      env:
        REACT_QUAY_APP_API_URL: http://localhost:8080
    - uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: cypress-screenshots
        path: cypress/screenshots
    - uses: actions/upload-artifact@v2
      if: always()
      with:
        name: cypress-videos
        path: cypress/videos

  docker-arm64:
    name: Docker Build arm64
    runs-on: ubuntu-20.04
    steps:

    - uses: actions/checkout@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Docker Build (linux/arm64)
      env:
        DOCKER_BUILDKIT: 1
      run: docker build --platform=linux/arm64 .

  docker-ppc64le:
    name: Docker Build ppc64le
    runs-on: ubuntu-20.04
    steps:

    - uses: actions/checkout@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Docker Build (linux/ppc64le)
      env:
       DOCKER_BUILDKIT: 1
      run: docker build --platform=linux/ppc64le .

  docker-s390x:
    name: Docker Build s390x
    runs-on: ubuntu-20.04
    steps:

    - uses: actions/checkout@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Docker Build (linux/s390x)
      env:
       DOCKER_BUILDKIT: 1
      run: docker build --platform=linux/s390x .

  mysql:
    name: E2E MySQL Test
    runs-on: ubuntu-20.04
    steps:

    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v1
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libgpgme-dev libldap2-dev libsasl2-dev swig
        sudo systemctl unmask docker
        sudo systemctl start docker
        docker version
        python -m pip install --upgrade pip
        cat requirements-dev.txt | grep tox | xargs pip install

    - name: tox
      run: tox -e py39-mysql

  psql:
    name: E2E Postgres Test
    runs-on: ubuntu-20.04
    steps:

    - uses: actions/checkout@v2
    - name: Set up Python 3.6
      uses: actions/setup-python@v1
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libgpgme-dev libldap2-dev libsasl2-dev swig
        sudo systemctl unmask docker
        sudo systemctl start docker
        docker version
        python -m pip install --upgrade pip
        cat requirements-dev.txt | grep tox | xargs pip install

    - name: tox
      run: tox -e py39-psql
