"""Add DerivedStorageForManifest table

Revision ID: e8e27f36f87d
Revises: 04b9d2191450
Create Date: 2020-03-27 14:41:28.881075

"""

# revision identifiers, used by Alembic.
revision = "e8e27f36f87d"
down_revision = "04b9d2191450"

import sqlalchemy as sa


def upgrade(op, tables, tester):
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "derivedstorageformanifest",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("source_manifest_id", sa.Integer(), nullable=False),
        sa.Column("derivative_id", sa.Integer(), nullable=False),
        sa.Column("transformation_id", sa.Integer(), nullable=False),
        sa.Column("uniqueness_hash", sa.String(length=255), nullable=True),
        sa.ForeignKeyConstraint(
            ["derivative_id"],
            ["imagestorage.id"],
            name=op.f("fk_derivedstorageformanifest_derivative_id_imagestorage"),
        ),
        sa.ForeignKeyConstraint(
            ["source_manifest_id"],
            ["manifest.id"],
            name=op.f("fk_derivedstorageformanifest_source_manifest_id_manifest"),
        ),
        sa.ForeignKeyConstraint(
            ["transformation_id"],
            ["imagestoragetransformation.id"],
            name=op.f("fk_derivedstorageformanifest_transformation_id_imagest_079575c1"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_derivedstorageformanifest")),
    )

    op.create_index(
        "derivedstorageformanifest_derivative_id",
        "derivedstorageformanifest",
        ["derivative_id"],
        unique=False,
    )
    op.create_index(
        "derivedstorageformanifest_source_manifest_id",
        "derivedstorageformanifest",
        ["source_manifest_id"],
        unique=False,
    )
    op.create_index(
        "derivedstorageformanifest_source_manifest_id_transform_265d78f6",
        "derivedstorageformanifest",
        ["source_manifest_id", "transformation_id", "uniqueness_hash"],
        unique=True,
    )
    op.create_index(
        "derivedstorageformanifest_transformation_id",
        "derivedstorageformanifest",
        ["transformation_id"],
        unique=False,
    )
    # ### end Alembic commands ###

    # ### population of test data ### #
    tester.populate_table(
        "derivedstorageformanifest",
        [
            ("source_manifest_id", tester.TestDataType.Foreign("manifest")),
            ("derivative_id", tester.TestDataType.Foreign("imagestorage")),
            ("transformation_id", tester.TestDataType.Foreign("imagestoragetransformation")),
            ("uniqueness_hash", tester.TestDataType.String),
        ],
    )
    # ### end population of test data ### #


def downgrade(op, tables, tester):
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("derivedstorageformanifest")
    # ### end Alembic commands ###
