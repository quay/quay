/* eslint-disable react/prop-types */
import {
  Alert,
  Button,
  Label,
  Modal,
  ModalVariant,
  Skeleton,
  Spinner,
} from '@patternfly/react-core';
import isEqual from 'lodash/isEqual';
import {useEffect, useState} from 'react';
import TagsInput, {RenderTagProps} from 'react-tagsinput';
import {useRecoilState} from 'recoil';
import {securityDetailsCallStateSelector} from 'src/atoms/SecurityDetailsState';
import {useAlerts} from 'src/hooks/UseAlerts';
import {AlertVariant} from 'src/atoms/AlertState';
import {
  useManifestVulnerabilitySuppressions,
  useSetManifestVulnerabilitySuppressions,
} from 'src/hooks/UseVulnerabilitySuppressions';
import {addDisplayError} from 'src/resources/ErrorHandling';
import {Tag} from 'src/resources/TagResource';

export function VulnerabilitySuppressionsModal(
  props: VulnerabilitySuppressionsModalProps,
) {
  const {addAlert} = useAlerts();
  const [isInputValid, setIsInputValid] = useState<boolean>(true);
  const [suppressedVulns, setSuppressedVulns] = useState<string[]>([]);
  const [reloadGlobalData, setReloadGlobalData] = useRecoilState(
    securityDetailsCallStateSelector(props.digest),
  );
  const {
    suppressions,
    loadingSuppressions,
    errorLoadingSuppressions,
    errorLoaddingSuppressionsDetails,
  } = useManifestVulnerabilitySuppressions(
    props.org,
    props.repo,
    props.digest,
    props.isOpen,
  );

  const {
    setSuppressions,
    loadingSettingSuppressions,
    successSettingSuppressions,
    errorSettingSuppressions,
    errorSettingSuppressionsDetails,
  } = useSetManifestVulnerabilitySuppressions(
    props.org,
    props.repo,
    props.digest,
  );

  const reset = () => {
    props.setIsOpen(false);
    setReloadGlobalData(!reloadGlobalData);
  };

  const inputClassName = isInputValid ? 'input' : 'input invalid-tag';

  const inputProps = {
    className: inputClassName,
    placeholder: 'Add a CVE',
    spellCheck: 'false',
    id: 'tags-input',
    ['data-test']: 'tags-input',
  };

  const pasteSplit = (data: string) => {
    return data.split(/[\s,;]+/).map((tag) => tag.trim());
  };

  const renderTag = (props: RenderTagProps) => {
    const {tag, key, onRemove, getTagDisplayValue} = props;
    return (
      <Label
        className="co-label tag-item-content"
        key={key}
        onClose={() => onRemove(key)}
      >
        {getTagDisplayValue(tag)}
      </Label>
    );
  };

  const updateTags = (tags) => {
    setSuppressedVulns(tags);
    setIsInputValid(true);
  };

  useEffect(() => {
    if (suppressions && !isEqual(suppressions, suppressedVulns)) {
      setSuppressedVulns(suppressions);
    }
  }, [suppressions]);

  useEffect(() => {
    if (successSettingSuppressions) {
      addAlert({
        variant: AlertVariant.Success,
        title:
          'Successfully updated vulnerability suppressions for ' +
          props.repo +
          ':' +
          props.tag.name,
      });
      reset();
    }
  }, [successSettingSuppressions]);

  const isUpdateButtonDisabled = () => {
    return (
      isEqual(suppressedVulns, suppressions) ||
      !isInputValid ||
      loadingSettingSuppressions
    );
  };

  return (
    <>
      <Modal
        id="vulnerability-suppression-modal"
        title="Manage vulnerability suppressions"
        description={
          <span>
            Specify vulnerability identifiers to suppress for the manifest this
            tag points to. For example &quot;CVE-2021-44228&quot;. They will
            match any vulnerability identifier that contains the specified
            string.
          </span>
        }
        isOpen={props.isOpen}
        disableFocusTrap={false}
        key="vuln-supp-modal"
        onClose={() => {
          props.setIsOpen(false);
        }}
        data-testid="vulnerability-suppression-modal"
        variant={ModalVariant.small}
        actions={[
          <Button
            key="modal-action-button"
            variant="primary"
            onClick={() => setSuppressions({vulnerabilities: suppressedVulns})}
            isDisabled={isUpdateButtonDisabled()}
          >
            Update
          </Button>,
          <Button
            key="cancel"
            variant="secondary"
            onClick={() => {
              props.setIsOpen(false);
            }}
            isDisabled={loadingSettingSuppressions}
          >
            Cancel
          </Button>,
          loadingSettingSuppressions ? (
            <Spinner size="md" className="pf-v5-u-ml-md" key="loading" />
          ) : null,
        ]}
      >
        <Skeleton hidden={!loadingSuppressions} width="100%" />
        {errorLoadingSuppressions && (
          <Alert
            isInline
            variant="danger"
            title={addDisplayError(
              'Failed to load vulnerability suppressions',
              errorLoaddingSuppressionsDetails,
            )}
          />
        )}

        {errorSettingSuppressions && (
          <Alert
            isInline
            variant="danger"
            title={addDisplayError(
              'Failed to set vulnerability suppressions',
              errorSettingSuppressionsDetails,
            )}
          />
        )}

        {!errorLoadingSuppressions && !loadingSuppressions && (
          <div className="tags-input">
            <TagsInput
              value={suppressedVulns}
              className="tags"
              addKeys={[9, 13, 32]}
              removeKeys={[8]}
              inputProps={inputProps}
              renderTag={renderTag}
              onChange={updateTags}
              onlyUnique={true}
              validationRegex={/^[^\s]+$/}
              onValidationReject={() => setIsInputValid(false)}
              pasteSplit={pasteSplit}
              addOnBlur
              addOnPaste
            />
          </div>
        )}
      </Modal>
    </>
  );
}

type VulnerabilitySuppressionsModalProps = {
  isOpen: boolean;
  setIsOpen: (isOpen: boolean) => void;
  org: string;
  repo: string;
  digest: string;
  tag: Tag;
};
