/* eslint-disable react/prop-types */
import {
  ActionGroup,
  Button,
  Flex,
  Form,
  FormGroup,
  FormHelperText,
  HelperText,
  Label,
  Spinner,
} from '@patternfly/react-core';
import isEqual from 'lodash/isEqual';
import {UseMutateFunction} from '@tanstack/react-query';
import {AxiosError} from 'axios';
import {useEffect, useState} from 'react';
import TagsInput, {RenderTagProps} from 'react-tagsinput';

export default function VulnerabilitySuppressionInput(
  props: VulnerabilitySuppressionInputProps,
) {
  const [isInputValid, setIsInputValid] = useState<boolean>(true);
  const [suppressedVulns, renderSuppressedVulns] = useState<string[]>([]);

  const initialState = () => {
    renderSuppressedVulns(props.suppressedVulnerabilities);
  };

  const isInitialState = () => {
    return isEqual(suppressedVulns, props.suppressedVulnerabilities);
  };

  const handleSubmit = async (event) => {
    event.preventDefault();
    props.mutator(suppressedVulns);
  };

  const handleReset = async (event) => {
    event.preventDefault();
    initialState();
  };

  const inputClassName = isInputValid ? 'input' : 'input invalid-tag';

  const inputProps = {
    className: inputClassName,
    placeholder: 'Add a CVE',
    spellCheck: 'false',
    id: 'tags-input',
    ['data-test']: 'tags-input',
  };

  const pasteSplit = (data: string) => {
    return data.split(/[\s,;]+/).map((tag) => tag.trim());
  };

  const renderTag = (props: RenderTagProps<string>) => {
    const {tag, key, onRemove, getTagDisplayValue} = props;
    return (
      <Label
        className="co-label tag-item-content"
        key={key}
        onClose={() => onRemove(key)}
      >
        {getTagDisplayValue(tag)}
      </Label>
    );
  };

  const updateTags = async (tags) => {
    renderSuppressedVulns(tags);
    setIsInputValid(true);
  };

  useEffect(() => {
    initialState();
  }, []);

  return (
    <Form id="form-form" maxWidth="70%">
      <FormGroup
        isInline
        label="Vulnerability Suppressions"
        fieldId="form-vulnerability-suppressions"
      >
        <div className="tags-input">
          <TagsInput
            value={suppressedVulns}
            className="tags"
            addKeys={[9, 13, 32]}
            removeKeys={[8]}
            inputProps={inputProps}
            renderTag={renderTag}
            onChange={updateTags}
            onlyUnique={true}
            validationRegex={/^[^\s]+$/}
            onValidationReject={() => setIsInputValid(false)}
            pasteSplit={pasteSplit}
            addOnBlur
            addOnPaste
          />
        </div>
        <FormHelperText>
          <HelperText>
            {props.helperText
              ? props.helperText
              : 'Enter CVE identifiers to suppress'}
          </HelperText>
        </FormHelperText>
      </FormGroup>

      <ActionGroup>
        <Flex
          justifyContent={{default: 'justifyContentFlexEnd'}}
          width={'100%'}
        >
          <Button
            variant="primary"
            type="submit"
            onClick={(event) => handleSubmit(event)}
            isDisabled={props.loading || !isInputValid || isInitialState()}
            id="save-suppressions-button"
          >
            Save
          </Button>
          <Button
            variant="secondary"
            type="reset"
            onClick={(event) => handleReset(event)}
            isDisabled={props.loading}
            id="reset-suppressions-button"
          >
            Reset
          </Button>
          {props.loading && <Spinner size="md" className="pf-v5-u-ml-md" />}
        </Flex>
      </ActionGroup>
    </Form>
  );
}

interface VulnerabilitySuppressionInputProps {
  suppressedVulnerabilities: string[];
  mutator: UseMutateFunction<
    Response,
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    AxiosError<unknown, any>,
    string[],
    unknown
  >;
  loading: boolean;
  helperText?: string;
}
