import {useMutation, useQuery, useQueryClient} from '@tanstack/react-query';
import {AxiosError} from 'axios';
import {setOrganizationVulnerabilitySuppressions} from 'src/resources/OrganizationResource';
import {setRepositoryVulnerabilitySuppressions} from 'src/resources/RepositoryResource';
import {
  ManifestVulnerabilitySuppressionsResponse,
  getManifestVulnerabilitySuppressions,
  setManifestVulnerabilitySuppressions,
} from 'src/resources/TagResource';

export function useManifestVulnerabilitySuppressions(
  org: string,
  repo: string,
  digest: string,
  enabled: boolean,
) {
  const {
    data: suppressionsResponse,
    isInitialLoading: loadingSuppressions,
    isError: errorLoadingSuppressions,
    error: errorManifestVulnerabilitySuppressions,
  } = useQuery(
    ['manifestvulnsuppressions', org, 'repo', repo, 'digest', digest],
    () => getManifestVulnerabilitySuppressions(org, repo, digest),
    {
      enabled: enabled,
    },
  ) as {
    data: ManifestVulnerabilitySuppressionsResponse;
    isInitialLoading: boolean;
    isError: boolean;
    error: AxiosError | null;
  };

  const suppressions = suppressionsResponse?.suppressed_vulnerabilities || [];

  return {
    suppressions: suppressions,
    loadingSuppressions: loadingSuppressions,
    errorLoadingSuppressions: errorLoadingSuppressions,
    errorLoaddingSuppressionsDetails: errorManifestVulnerabilitySuppressions,
  };
}

export function useSetManifestVulnerabilitySuppressions(
  org: string,
  repo: string,
  digest: string,
) {
  const queryClient = useQueryClient();

  const {
    mutate: mutateSettingSuppressions,
    isSuccess: successSettingSuppressions,
    isError: errorSettingSuppressions,
    error: errorSettingSuppressionsDetails,
    isLoading: loadingSettingSuppressions,
  } = useMutation(
    async ({vulnerabilities}: {vulnerabilities: string[]}) =>
      setManifestVulnerabilitySuppressions(org, repo, digest, vulnerabilities),
    {
      onSuccess: () => {
        queryClient.removeQueries([
          'manifestvulnsuppressions',
          org,
          'repo',
          repo,
          'digest',
          digest,
        ]);
      },
    },
  ) as {
    mutate: (data: {vulnerabilities: string[]}) => void;
    isSuccess: boolean;
    isError: boolean;
    error: AxiosError | null;
    isLoading: boolean;
  };

  return {
    setSuppressions: mutateSettingSuppressions,
    loadingSettingSuppressions: loadingSettingSuppressions,
    successSettingSuppressions: successSettingSuppressions,
    errorSettingSuppressions: errorSettingSuppressions,
    errorSettingSuppressionsDetails: errorSettingSuppressionsDetails,
  };
}

interface UseRepositoryVulnerabilitySuppressionsOptions {
  org: string;
  repo: string;
  onSuccess?: (result: Response) => void;
  onError?: (err: AxiosError) => void;
}

export function useRepositoryVulnerabilitySuppressions(
  options: UseRepositoryVulnerabilitySuppressionsOptions,
) {
  const {org, repo, onSuccess, onError} = options;

  const queryClient = useQueryClient();
  const {mutate, isLoading} = useMutation(
    async (suppressions: string[]) =>
      setRepositoryVulnerabilitySuppressions(org, repo, suppressions),
    {
      onSuccess: (result: Response) => {
        queryClient.invalidateQueries(['repodetails', org, repo]);
        onSuccess(result);
      },
      onError: (err: AxiosError) => {
        onError(err);
      },
    },
  );

  return {
    setSuppressions: mutate,
    loading: isLoading,
  };
}

interface UseOrganizationVulnerabilitySuppressionsOptions {
  org: string;
  onSuccess?: (result: Response) => void;
  onError?: (err: AxiosError) => void;
}

export function useOrganizationVulnerabilitySuppressions(
  options: UseOrganizationVulnerabilitySuppressionsOptions,
) {
  const {org, onSuccess, onError} = options;

  const queryClient = useQueryClient();
  const {mutate, isLoading} = useMutation(
    async (suppressions: string[]) =>
      setOrganizationVulnerabilitySuppressions(org, suppressions),
    {
      onSuccess: (result: Response) => {
        queryClient.invalidateQueries(['organization', org]);
        onSuccess(result);
      },
      onError: (err: AxiosError) => {
        onError(err);
      },
    },
  );

  return {
    setSuppressions: mutate,
    loading: isLoading,
  };
}
